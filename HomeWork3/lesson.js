// --------------------------//
// --------------------------//
// області видимості
// Область видимості змінних (variable scope) – доступність змінних у певному місці
// коду.Є кілька областей видимості: глобальна, блокова, eval та функції.

// Глобальна область видимості використовується за умовчанням. Усі і всі мають
// доступ до змінних оголошених у ній. Змінні оголошені у глобальній області
// видимості вразливі, оскільки може змінити будь - яку ділянку коду.

// Будь-яка конструкція використовує фігурні дужки {} (умови, цикли, функції тощо)
// створює нову локальну область видимості, і змінні, оголошені в цій області
// видимості, використовуючи let або const, не доступні поза цим блоком.

//Все що було в фігурних дужках-залишаеться в них
// --------------------------//
// --------------------------//

// const a = 5; //глобальна

// if (true) {
//   const b = 10;
//   console.log('Block', b);
// }

// console.log('Global', a);

// --------------------------//
// --------------------------//
// Цикли

//Цикл — конструкція, що управляє, у високорівневих мовах програмування, призначена для організації багаторазового виконання набору інструкцій.
//Тіло циклу – послідовність інструкцій, призначена для багаторазового виконання.

//Ітерація – одиничне виконання тіла циклу.
//Умова виходу - вираз, що визначає в черговий раз виконуватися ітерація, або цикл завершиться.

//Лічильник - змінна, що зберігає поточний номер ітерації.Цикл необов'язково містить лічильник, і не повинен бути один, умова виходу з циклу може залежати від кількох змінних у циклі змінних.
// --------------------------//
// --------------------------//

//Цикл “while”
//Цикл while має такий синтаксис:

// while (умова) {
// код
// так зване "тіло циклу"}

//Доки умова є вірною, виконується код із тіла циклу.

// let a = 0;

// while (a < 5) {
//   a++;
//   console.log('a', a);
// }

// let a = 3;

// while (a) {
//   console.log('a', a);
//   a--;
// }

// while (a) console.log(a--);

// do while

// let a = 0;

// do {
//   console.log(a);
//   a++;
// } while (a < 5);

//for

// for (let a = 0; a < 3; a++) {
//   console.log(a);
// }

// let a = 0;
// for (a = 0; a < 3; a++) {
//   console.log(a);
// }

// --------------------------//
// --------------------------//
// break && continue
// --------------------------//
// --------------------------//

// break

// let summ = 0;

// while (true) {
//   let value = +prompt('Введіть число');
//   if (!value) break;

//   summ += value;
// }

// console.log('Summ', summ);

//continue

// for (let i = 0; i < 10; i++) {
//   if (i % 2 === 0) continue;
//   console.log(i);
// }

// --------------------------//
// --------------------------//
// Масиви

//Масив - структура даних для зберігання та маніпулювання колекцією індексованих значень. Використовуються для зберігання впорядкованих колекцій даних, наприклад, списку курортів, товарів, клієнтів у готелі тощо.

//Синтаксис для створення нового масиву - квадратні дужки[] зі списком елементів розділених комами. У масиві може зберігатися будь-яка кількість елементів будь-якого типу.

//Оголошення
//Існує два типи синтаксу для створення порожнього масиву:
//let arr = new Array();
//let arr = [];

//Методи масиву
//push() — дозволяє додати один або кілька елементів до кінця масиву. Метод повертає значення властивості length, що визначає кількість елементів у масиві.
//pop() — видаляє елемент із кінця масиву
//shift() — видаляє елемент із початку масиву та повертає його (елемента) значення
//unshift() — додає елемент на початок масиву.
//splice - Метод arr.splice – це універсальний «швейцарський ніж» для роботи з масивами. Вміє все: додавати, видаляти і замінювати елементи.
// --------------------------//
// --------------------------//

// let arr = ['Apple', 'Orange', 'Plum'];

// arr[2] = 'Lemon';

// arr[3] = 'Cherry';

// console.log(arr);

// arr.push('Tomat'); //додати

// console.log(arr);

// arr.pop(); //видалити останній доданний

// console.log(arr);

// arr.shift(); // видалити ще один останній

// console.log(arr);

// arr.unshift('Tomat'); //додати те що хочимо знову

// console.log(arr);

// for (let i = 0; i < arr.length; i++) {
//   console.log(arr[i]); //перебирання масиву
// }

// for (let item of arr) {
//   console.log(item);
// } //перебирання масиву

// for (let key in arr) {
//   console.log(arr[key]);
// }

// let matrix = [
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9],
// ];
// console.log(matrix[1][2]);

// --------------------------//
// --------------------------//
// методи присвоєння
// --------------------------//
// --------------------------//

// let a = 5;
// let b = a;

// a = 10;

// console.log(a);
// console.log(b);

// let arr = [1, 2, 3];
// let arr2 = arr;

// arr.push(4);

// console.log(arr2);

// --------------------------//
// --------------------------//
// методи масиву
// --------------------------//
// --------------------------//

// let arr = ['a', 'b', 'c', 'd', 'f'];

// arr.splice(2, 2); //arr.splice(с чого/якого почати видаляти, скільки треба видалити)

// console.log(arr);

// console.log(arr.slice(1, 3)); //arr.slice(с чого/якого почати додавати/повертати, скільки треба додати/повернути)

// let a = [1, 2, 3];

// console.log(arr.concat(a)); //додає все в один массив

// console.log(arr.indexOf('c', 1));
// console.log(arr.lastIndexOf('c'));

// console.log(arr.includes("c"));

// const fruts = [
//   { id: 0, name: 'Apple' },
//   { id: 1, name: 'Tomat' },
//   { id: 2, name: 'Cherry' },
//   { id: 3, name: 'Orange' },
// ];

//find
// console.log(fruts.find(item => item.id === 1));

//filter
// console.log(fruts.filter(item => item.id < 2 ));

//map
// let result = fruts.map(item => item.name.length);
// console.log(result);

//split
// let names = 'Olya, Yulya, Anna, Petya';
// let arr = names.split(', ');
// // console.log(arr);
// let newString = arr.join(', ');
// console.log(newString);

// let arr = [1, 2, 3, 4, 5];
// let red = arr.reduce((summ, item) => summ + item);
// console.log(red); //зробити сумму чисел ( додавали кожне наступне число до попередньої суми )

// let arr = [23, 45, 30];
// let summ = arr.reduce((summ, item) => summ + item) / arr.length;
// console.log(summ);  //знайшли середне число
